#version 430 core

layout(local_size_x = 64, local_size_y = 1, local_size_z = 1) in;

layout(std430, binding = 1) buffer positions
{
	float position[];
};

layout(std430, binding = 2) buffer texcoords
{
	vec2 texCoord[];
};

layout(std430, binding = 3) buffer indices
{
	int index[];
};

struct Triangle{
	vec3 posA;
	vec2 uvA;

	vec3 posB;
	vec2 uvB;

	vec3 posC;
	vec2 uvC;
};

vec3 GetPosition(int index) {
    return vec3(position[3 * index + 0], position[3 * index + 1], position[3 * index + 2]);
}

layout(std430, binding = 9) writeonly buffer effects {
	int effect[];
};

layout(rgba32f, binding = 1) uniform image2D mask;

uniform vec3 localPos;

float GetTriArea(vec3 a, vec3 b, vec3 c) {
	vec3 v0 = b - a;
	vec3 v1 = c - a;
	vec3 crossProduct = cross(v0, v1);
	float area = 0.5 * length(crossProduct);

	return area;
}

vec3 Barycentric(vec3 a, vec3 b, vec3 c, vec3 p) {
	float total = GetTriArea(a, b, c);
	vec3 bary;
	bary.x = float(GetTriArea(p, b, c) / total);
	bary.y = float(GetTriArea(a, p, c) / total);
	bary.z = float(GetTriArea(a, b, p) / total);

	return bary;
}

void main(void) {
    int index1 = index[3 * int(gl_GlobalInvocationID.x)];
	int index2 = index[3 * int(gl_GlobalInvocationID.x) + 1];
	int index3 = index[3 * int(gl_GlobalInvocationID.x) + 2];
	
	Triangle triangle;
	triangle.posA = GetPosition(index1);
	triangle.posB = GetPosition(index2);
	triangle.posC = GetPosition(index3);
	
	triangle.uvA = texCoord[index1];
	triangle.uvB = texCoord[index2];
	triangle.uvC = texCoord[index3];
	
	vec3 bary = Barycentric(triangle.posA, triangle.posB, triangle.posC, localPos);

	if (bary.x >= 0 && bary.x <= 1
		&& bary.y >= 0 && bary.y <= 1
		&& bary.z >= 0 && bary.z <= 1)
	{
		vec2 uvCoord = bary.x * triangle.uvA + bary.y * triangle.uvB + bary.z * triangle.uvC;

		vec3 colour = imageLoad(mask, ivec2(uvCoord * imageSize(mask))).rgb;

	vec3 colours[5];
	colours[0] = vec3(1, 0, 0);
	colours[1] = vec3(0, 0, 1);
	colours[2] = vec3(0, 1, 0);
	colours[3] = vec3(1, 0, 1);
	colours[4] = vec3(0, 1, 1);

		effect[0] = 0;

		for (int i = 0; i < 5; i++) {
			if (colour == colours[i]) {
				effect[0] = i + 1;
				break;
			}
		}
	}
}